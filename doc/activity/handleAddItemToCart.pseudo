

/*
    This method is to handle the scanning of QR code and adding the scanned item
    that corresponds to the QR code to the virtual cart and send the 
    notification to the warehouse for the (partial) fulfillment of the item
    in the physical cart.

    The ShoppingCart and CustomerProfile parameters are presumed to be existing
    from a previous (probably) authentication that leads up to this call; it is
    safe to assume that these objects are valid instances and are not null.

    This follows the pseudocode syntax from here:
    https://marketplace.visualstudio.com/items?itemName=willumz.generic-pseudocode

    @authordlegaspi@bu.edu
    @see StoreDataBaseLayer::lookupByItemId
    @see QRItemLookup::convertQRCodeToItemId
    @param cart ShoppingCart the shopping cart
    @param profile CustomerProfile the customer's profile
*/
function handleScanItem(cart, profile) {

    // (1) Scan the selected item's QR code using the mobile device's camera
    let itemId = null
    let validQRCode = false
    while (validQRCode != true) do
        let img = camera.scan()

        try {
            // (2) Convert the QR code into an item id
            let itemId = qrItemLookup.convertQRCodeToItemId(img)    
            
            // (2a) No exception; meaning the QR code is successfully converted
            // into Item ID
            validQRCode = true;
        } catch(InvalidQRCodeException) {
            
        }
        // (2b) An exception has occurred; meaning the QR code conversion failed
        // so we repeat the process (validQRCode is still false)
        showErrorDialog("Invalid QR Code")
    end
  
    // (3) Look up the item id in the Item Database
    let selectedItem = storeBusinessLayer.lookupByItemId(itemId)

    // (3a) The item id was not found in the database
    if (selectedItem == null) {
        // show the error dialog and then end here
        showErrorDialog("Item is not Available!")
    } else {
        // (3b) The item id was found; we gather the details and availability
        let details = storeBusinessLayer.getItemDetails(selectedItem, profile)
        let availableQty = storeBusinessLayer.getAvailableQuantity(selectedItem)

        // (4) Display the item details
        displayItemDetails(details)
         
        // (5) Input the desired quantity; if quantity inputted is 0
        // or more than the available quantity, throw up an error dialog
        // and repeat the process
        let selectedQty = 0
        while (selectedQty > 0 and selectedQty > availableQty) do
            selectedQty = getSelectedQuantityInputDialog()
        end   
        
        // (6) Wait for user to tap "Add Item to Cart"
        waitForAddItemToCart() 

        // (7) Item added to cart, update the cart then send the notification
        // via the AddItemToCart queue
        storeBusinessLayer.addItemToCart(selectedItem)

        // (8) Update cart contents
        displayCartContents()
    }
}